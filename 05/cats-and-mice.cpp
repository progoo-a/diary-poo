#include <iostream>
#include <vector>

// Interface 
// Une interface est une classe dont toutes les m√©thodes
// sont virtuelles pures.
class Animal {
    protected:
    std::string name;
    public:
    Animal(std::string name) : name{name} {}
    virtual void eat() = 0; // M√©thode virtuelle pure 
    virtual void speak() = 0;
    virtual void sleep() = 0;
};

struct Cat : public Animal {
    int griffes = 10;

    Cat(std::string name) : Animal(name) { std::cout << "New üêà\n"; }
    void sleep() override { std::cout << name << "üêà Sleep\n"; }
    void eat() override { std::cout << name << "üêà Eat\n"; }
    void speak() override { std::cout << name << "üêà Speak\n"; }
};

struct Mouse : public Animal {
    Mouse(std::string name) : Animal(name)  { std::cout << "New üêÅ\n"; }
    void sleep() override { std::cout << name << "üêÅ Sleep\n"; }
    void eat() override { std::cout << name << "üêÅ Eat\n"; }
    void speak() override { std::cout << name << "üêÅ Speak\n"; }    
};

void happyLife(Animal *animal) {
    animal->eat();
    animal->speak();
    animal->sleep();
}

std::string names[] = {"A", "B", "C", "D", "E"};

int main() {
    Cat cat("Felix");
    Mouse mouse("Mickey");

    std::vector<Animal *> zoo;
    for (int i = 0; i < 5; i++) {
        if (rand() % 2)
            zoo.push_back(new Cat(names[i]));
        else
            zoo.push_back(new Mouse(names[i]));
    }

    for (auto &animal : zoo) {
        animal->eat();
    }
}
/**
 * Class A : public B
 * A h√©rite de tout B, ce qui est public reste public, ce qui est prot√©g√©
 * reste prot√©g√© et ce qui est priv√© reste priv√©.
 * 
 * Class A : protected B
 * A h√©rite de tout B, ce qui est public devient prot√©g√©, ce qui est prot√©g√©
 * reste prot√©g√© et ce qui est priv√© reste priv√©.
 * 
 * Class A : private B
 * A h√©rite de tout B
 *   public -> priv√©
 *   protected -> priv√©
 *   priv√© -> priv√© (pas acc√®s)
 * 
 * ------
 * 
 * public : accessible √† tout le monde 
 * prot√©g√© : accessible uniquement de l'int√©rieur ou des classes d√©riv√©es
 * priv√©: accessible uniquement de l'int√©rieur de la classe
 */